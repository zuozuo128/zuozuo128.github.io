<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>高效测试测试题</title>
      <link href="/2022/04/08/gao-xiao-ce-shi-ce-shi-ti/"/>
      <url>/2022/04/08/gao-xiao-ce-shi-ce-shi-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="高效测试课堂测试"><a href="#高效测试课堂测试" class="headerlink" title="高效测试课堂测试"></a>高效测试课堂测试</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><ol><li><p>在JUNIT 3.X使用中,写测试方法名时一定要以 test 开头</p></li><li><p>在JUNIT 3.X使用中，所写测试类一定要继承 TestCase类 </p></li><li><p>在Junit中,通常用创建一个测试用到哪三步？</p><ul><li>步骤1、创建被测试的对象</li></ul><ul><li>步骤2、调用被测试的方法，输入对应的参数</li></ul><ul><li>步骤3、判断预期结果与真实结果是否一致</li></ul></li><li><p>在JUNIT 3.X使用中，tearDown()这个方法的的功能是什么?</p><ul><li>在每个测试方法执行之后执行，一般用于测试方法的收尾工作。</li></ul></li><li><p>在JUNIT 3.X使用中，setUp()这个方法的功能是什么？</p><ul><li>每个测试方法执行之前都会执行一次，一般用了初始化工作。</li></ul></li><li><p>@AfterClass：这个annotation 在Junit中的含意</p><ul><li>@AfterClass：针对所有测试，在所有测试方法执行结束后执行一次</li></ul><ul><li>格式：@AfterClass public static  void method()</li></ul></li><li><p>@BeforeClass：这个annotation 在Junit中的含意</p><ul><li>@BeforeClass：针对所有测试，在所有测试方法执行前执行一次</li></ul><ul><li>格式：@BeforeClass public static void method()</li></ul></li><li><p>@After 这个annotation 在Junit中的含意</p><ul><li>@ After：释放资源，在任何测试执行之后需要进行的收尾工作。跟3.x中的tearDown()方法具有相同功能</li></ul></li><li><p>@Before 这个annotation 在Junit中的含意</p><ul><li>@Before：初始化方法，在任何一个测试执行之前必须执行的代码</li></ul></li><li><p>@Test 这个annotation 在Junit中的含意</p><ul><li>用于声明测试方法</li></ul></li></ol><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><ol><li>参数化测试运行器：Parameters.class</li><li>Hamcrest匹配器库中用于表示只要有一个条件成立，测试就通过的是 anyOf</li><li>套件运行器: Suite.class</li><li>在JUNIT 3.X使用中，写测试套件类时一定要用到如下方法；</li></ol><pre><code>public static  Test suite(){    ....      }</code></pre><ol start="5"><li>@RunWith 这个annotation的含意<ul><li>用于指定测试运行器</li></ul></li><li>@SuiteClasses这个anotation的含意<br> * 用于把多个测试用例或测试套件组成测试套件</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高效测试</title>
      <link href="/2022/04/06/gao-xiao-ce-shi/"/>
      <url>/2022/04/06/gao-xiao-ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="高效测试课堂测试"><a href="#高效测试课堂测试" class="headerlink" title="高效测试课堂测试"></a>高效测试课堂测试</h1><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><ol><li><p>在JUNIT 3.X使用中,写测试方法名时一定要以 test 开头</p></li><li><p>在JUNIT 3.X使用中，所写测试类一定要继承 TestCase类 </p></li><li><p>在Junit中,通常用创建一个测试用到哪三步？</p><ul><li>步骤1、创建被测试的对象</li></ul><ul><li>步骤2、调用被测试的方法，输入对应的参数</li></ul><ul><li>步骤3、判断预期结果与真实结果是否一致</li></ul></li><li><p>在JUNIT 3.X使用中，tearDown()这个方法的的功能是什么?</p><ul><li>在每个测试方法执行之后执行，一般用于测试方法的收尾工作。</li></ul></li><li><p>在JUNIT 3.X使用中，setUp()这个方法的功能是什么？</p><ul><li>每个测试方法执行之前都会执行一次，一般用了初始化工作。</li></ul></li><li><p>@AfterClass：这个annotation 在Junit中的含意</p><ul><li>@AfterClass：针对所有测试，在所有测试方法执行结束后执行一次</li></ul><ul><li>格式：@AfterClass public static  void method()</li></ul></li><li><p>@BeforeClass：这个annotation 在Junit中的含意</p><ul><li>@BeforeClass：针对所有测试，在所有测试方法执行前执行一次</li></ul><ul><li>格式：@BeforeClass public static void method()</li></ul></li><li><p>@After 这个annotation 在Junit中的含意</p><ul><li>@ After：释放资源，在任何测试执行之后需要进行的收尾工作。跟3.x中的tearDown()方法具有相同功能</li></ul></li><li><p>@Before 这个annotation 在Junit中的含意</p><ul><li>@Before：初始化方法，在任何一个测试执行之前必须执行的代码</li></ul></li><li><p>@Test 这个annotation 在Junit中的含意</p><ul><li>用于声明测试方法</li></ul></li></ol><h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><ol><li>参数化测试运行器：Parameters.class</li><li>Hamcrest匹配器库中用于表示只要有一个条件成立，测试就通过的是 anyOf</li><li>套件运行器: Suite.class</li><li>在JUNIT 3.X使用中，写测试套件类时一定要用到如下方法；</li></ol><pre><code>public static  Test suite(){    ....      }</code></pre><ol start="5"><li>@RunWith 这个annotation的含意<ul><li>用于指定测试运行器</li></ul></li><li>@SuiteClasses这个anotation的含意<br> * 用于把多个测试用例或测试套件组成测试套件</li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量</title>
      <link href="/2022/02/21/bian-liang/"/>
      <url>/2022/02/21/bian-liang/</url>
      
        <content type="html"><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="基础数据类型"><a href="#基础数据类型" class="headerlink" title="基础数据类型"></a>基础数据类型</h2><p><img src="https://i.postimg.cc/8Pb9T159/1.png" alt="基础数据类型"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/02/21/hello-world/"/>
      <url>/2022/02/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
